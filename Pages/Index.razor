@page "/"
@using yFilesWASM.Communicator
@inject CommunicatorService communicator
@using yFilesWASM.Hierarchy

<div id="graphComponent" style="height: 100%; width: 70%; float: left;"></div>

<div style="width: 30%; float: right; padding: 16px; box-sizing: border-box;">
    <PersonView Person="@this.SelectedPerson" />
</div>

@code {
    // Store the people with their node's id.
    private Dictionary<Person, int> Dict = new();

    // Store the selected person.
    private Person? selectedPerson = null;
    private Person? SelectedPerson
    {
        get => this.selectedPerson;
        set 
        {
            this.selectedPerson = value;
            // Manually update the view.
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create an object reference, then initialize the graph.
            var objRef = DotNetObjectReference.Create(this);
            await communicator.InitializeGraphAsync("#graphComponent", objRef);

            // Load the hierarchy.
            await this.LoadHierarchyAsync();
        }
    }

    private async Task LoadHierarchyAsync()
    {
        // Create the hierarchy.
        var hierarchy = Hierarchy.CreateRandomHierarchy();

        // Create nodes for the people and store the ids with the corresponding person in 'Dict'.
        foreach (var person in hierarchy.People)
        {
            int id = await communicator.CreateNodeAsync(person.ToString(), new Rect(0, 0, 130, 40));
            this.Dict.Add(person, id);
        }

        // For each link, add an edge. We know the ids of the people's node from 'Dict'.
        foreach (var link in hierarchy.Links)
        {
            await communicator.CreateEdgeAsync(this.Dict[link.Item1], this.Dict[link.Item2]);
        }

        // Finally, apply a hierarchic layout.
        await communicator.ApplyHierarchicLayout();
    }

    [JSInvokable]
    public void SetSelectedPerson(int id)
    {
        // Loop through the people with their ids and find out the selected person.
        foreach (var i in this.Dict)
        {
            if (i.Value == id)
            {
                this.SelectedPerson = i.Key;
                return;
            }
        }

        // Reset if the corresponding person to the id can't be found.
        this.SelectedPerson = null;
    }
}